#!/bin/bash

#DEFINE
TOMCAT_MAJOR="8"
TOMCAT_VERSION="8.0.22"
KC_PROJECT_VERSION="1507"
MYSQL_CONNECTOR_VERSION="5.1.34"
SPRING_INSTRUMENTATION_TOMCAT_VERSION="3.2.12"
# Oracle Settings
SETUP_FILES_FOLDER="${CURRENT_WORKING_DIR}/setup_files"
ORACLE_DRIVER_NAME="ojdbc6.jar"
if [ -f "/etc/redhat-release" ]; then
	LINUX_DISTRIBUTION=$(grep -Eo "(Red Hat|CentOS)" /etc/redhat-release)
fi
if [ -f /etc/debian_version ]; then
	LINUX_DISTRIBUTATION=$(grep -Eo "(Debian|Ubuntu)" /etc/issue)
fi
DISTRIBUTATION_VERSION=$(cat /etc/*release | grep VERSION_ID | cut -c 13)
CURRENT_WORKING_DIR=`pwd`

### GET THE SYSTEM'S IP ADDRESS
IP_ADDRESS=`ip addr | grep 'state UP' -A2 | tail -n1 | awk '{print $2}' | cut -f1  -d'/'`
SYSTEM_HOSTNAME=$(hostname -f)

# TOMCAT RELATED
TOMCAT_LINK="https://www.apache.org/dist/tomcat/tomcat-${TOMCAT_MAJOR}/v${TOMCAT_VERSION}/bin/apache-tomcat-${TOMCAT_VERSION}.tar.gz"
TOMCAT_FILE="apache-tomcat-${TOMCAT_VERSION}.tar.gz"
CATALINA_HOME="/opt/apache-tomcat/tomcat${TOMCAT_MAJOR}"

# Tomcat - Spring Instrumentation
SPRING_INSTRUMENTATION_TOMCAT_LINK="http://central.maven.org/maven2/org/springframework/spring-instrument-tomcat/${SPRING_INSTRUMENTATION_TOMCAT_VERSION}.RELEASE/spring-instrument-tomcat-${SPRING_INSTRUMENTATION_TOMCAT_VERSION}.RELEASE.jar"
SPRING_INSTRUMENTATION_TOMCAT_NAME="spring-instrument-tomcat-${SPRING_INSTRUMENTATION_TOMCAT_VERSION}.RELEASE.jar"




# Kuali Release File
KC_CONFIG_XML_LOC="/opt/kuali/main/dev"

# CLEAN-UP
CLEANUP_LOCATIONS="/opt/apache-tomcat /opt/kuali ${CURRENT_WORKING_DIR}/SQL_LOGS"

# Kuali Project
KC_PROJECT_WAR_NAME="kc-dev.war"
KC_PROJECT_FOLDER="${CURRENT_WORKING_DIR}/workspace/kc"
KC_PROJECT_LINK="https://github.com/kuali/kc"
KC_PROJECT_RICE_XML="https://goo.gl/nPZpJm"
KC_PROJECT_COEUS_XML="https://goo.gl/tZmmnh"
# SchemaSpy Project
SCHEMASPY_PROJECT_FORLDER="${CURRENT_WORKING_DIR}/workspace/schemaspy"
SCHEMASPY_PROJECT_LINK="https://github.com/kuali/schemaspy"
# Kuali Rice Project
KC_RICE_PROJECT_FORLDER="${CURRENT_WORKING_DIR}/workspace/kc-rice"
KC_RICE_PROJECT_LINK="https://github.com/kuali/kc-rice"
# Kuali Coeus Api Project
KC_API_PROJECT_FORLDER="${CURRENT_WORKING_DIR}/workspace/kc-api"
KC_API_PROJECT_LINK="https://github.com/kuali/kc-api"
# Kuali Coeus S2sGen
KC_S2SGEN_PROJECT_FORLDER="${CURRENT_WORKING_DIR}/workspace/kc-s2sgen"
KC_S2SGEN_PROJECT_LINK="https://github.com/kuali/kc-s2sgen"



# FUNCTIONS
function clone_kuali_coeus {
	if [ -d ${KC_PROJECT_FOLDER} ]; then
		echo
		echo
		echo "Checking for the Kuali Coeus Project Updates"
		echo "--------------------------------------------"
		cd ${KC_PROJECT_FOLDER}
		git pull
	else
		echo
		echo
		echo "Cloning the Kuali Coeus Project"
		echo "-------------------------------"
		mkdir -p ${CURRENT_WORKING_DIR}/workspace
		cd ${CURRENT_WORKING_DIR}/workspace
		git clone ${KC_PROJECT_LINK}
	fi
}

function compile_kuali {
	
	# Clone the Kuali Project
	clone_kuali_coeus

	# Get Projects Versions
	SCHEMASPY_PROJECT_VER=$(egrep "<schemaspy.version>" ${KC_PROJECT_FOLDER}/pom.xml | awk '{print $1}' | cut -d'>' -f2 | cut -d'<' -f1)
	KC_RICE_PROJECT_VER=$(egrep "<rice.version>" ${KC_PROJECT_FOLDER}/pom.xml | awk '{print $1}' | cut -d'>' -f2 | cut -d'<' -f1)
	KC_API_PROJECT_VER=$(egrep "<coeus-api-all.version>" ${KC_PROJECT_FOLDER}/pom.xml | awk '{print $1}' | cut -d'>' -f2 | cut -d'<' -f1)
	KC_S2SGEN_PROJECT_VER=$(egrep "<coeus-s2sgen.version>" ${KC_PROJECT_FOLDER}/pom.xml | awk '{print $1}' | cut -d'>' -f2 | cut -d'<' -f1)
	KC_PROJECT_VER=$(head -n 30 ${KC_PROJECT_FOLDER}/pom.xml | egrep "<version>" | awk '{print $1}' | cut -d'>' -f2 | cut -d'<' -f1)

	# BUILD SCHEMASPY
	if [ -d ${SCHEMASPY_PROJECT_FORLDER} ]; then
		cd ${SCHEMASPY_PROJECT_FORLDER}
		git checkout tags/schemaspy-${SCHEMASPY_PROJECT_VER}
		mvn clean compile source:jar javadoc:jar install -Dgrm.off=true
	else
		mkdir -p ${CURRENT_WORKING_DIR}/workspace
		cd ${CURRENT_WORKING_DIR}/workspace
		git clone ${SCHEMASPY_PROJECT_LINK}
		cd ${SCHEMASPY_PROJECT_FORLDER}
		git checkout tags/schemaspy-${SCHEMASPY_PROJECT_VER}
		mvn clean compile source:jar javadoc:jar install -Dgrm.off=true
	fi

	cd ..

	# BUILD KUALI RICE
	if [ -d ${KC_RICE_PROJECT_FORLDER} ]; then
		cd ${KC_RICE_PROJECT_FORLDER}
		git checkout tags/rice-${KC_RICE_PROJECT_VER}
		mvn clean compile source:jar javadoc:jar install -Dgrm.off=true
	else
		mkdir -p ${CURRENT_WORKING_DIR}/workspace
		cd ${CURRENT_WORKING_DIR}/workspace
		git clone ${KC_RICE_PROJECT_LINK}
		cd ${KC_RICE_PROJECT_FORLDER}
		git checkout tags/rice-${KC_RICE_PROJECT_VER}
		mvn clean compile source:jar javadoc:jar install -Dgrm.off=true
	fi

	cd ..

	# BUILD KUALI COEUS API
	if [ -d ${KC_API_PROJECT_FORLDER} ]; then
		cd ${KC_API_PROJECT_FORLDER}
		git checkout tags/coeus-api-${KC_API_PROJECT_VER}
		mvn clean compile source:jar javadoc:jar install -Dgrm.off=true
	else
		mkdir -p ${CURRENT_WORKING_DIR}/workspace
		cd ${CURRENT_WORKING_DIR}/workspace
		git clone ${KC_API_PROJECT_LINK}
		cd ${KC_API_PROJECT_FORLDER}
		git checkout tags/coeus-api-${KC_API_PROJECT_VER}
		mvn clean compile source:jar javadoc:jar install -Dgrm.off=true
	fi

	cd ..

	# BUILD KUALI COEUS S2SGEN
	if [ -d ${KC_S2SGEN_PROJECT_FORLDER} ]; then
		cd ${KC_S2SGEN_PROJECT_FORLDER}
		git checkout tags/coeus-s2sgen-${KC_S2SGEN_PROJECT_VER}
		mvn clean compile source:jar javadoc:jar install -Dgrm.off=true
	else
		mkdir -p ${CURRENT_WORKING_DIR}/workspace
		cd ${CURRENT_WORKING_DIR}/workspace
		git clone ${KC_S2SGEN_PROJECT_LINK}
		cd ${KC_S2SGEN_PROJECT_FORLDER}
		git checkout tags/coeus-s2sgen-${KC_S2SGEN_PROJECT_VER}
		mvn clean compile source:jar javadoc:jar install -Dgrm.off=true
	fi

	cd ..

	# BUILD KUALI COEUS
	cd ${KC_PROJECT_FOLDER}
	

	
		mvn install:install-file -Dfile=${SETUP_FILES_FOLDER}/${ORACLE_DRIVER_NAME} -DgroupId=com.oracle -DartifactId=ojdbc6 -Dversion=10.2.0.3.0 -Dpackaging=jar
		mvn -P oracle clean compile source:jar javadoc:jar install -Dgrm.off=true
	

	# Create a copy of the war file and the XML file to ingest
	echo
	echo "Copying a copy of the war file to the ${CURRENT_WORKING_DIR}/DOWNLOADS folder"
	mkdir -p ${CURRENT_WORKING_DIR}/DOWNLOADS
	cp ${CURRENT_WORKING_DIR}/workspace/kc/coeus-webapp/target/coeus-webapp-${KC_PROJECT_VER}.war ${CURRENT_WORKING_DIR}/DOWNLOADS/${KC_PROJECT_WAR_NAME}
	echo
	echo "Creating a copy of the XML file to ingest in the ${CURRENT_WORKING_DIR}/DOWNLOADS folder"
	sleep 3
	rm -f ${CURRENT_WORKING_DIR}/DOWNLOADS/rice-xml-${KC_PROJECT_VERSION}.zip
	rm -f ${CURRENT_WORKING_DIR}/DOWNLOADS/coeus-xml-${KC_PROJECT_VERSION}.zip
	jar xf ${CURRENT_WORKING_DIR}/workspace/kc/coeus-db/coeus-db-xml/target/coeus-db-xml-${KC_PROJECT_VER}.jar
	zip -r ${CURRENT_WORKING_DIR}/DOWNLOADS/rice-xml-${KC_PROJECT_VERSION}.zip org/kuali/coeus/rice-xml/
	zip -r ${CURRENT_WORKING_DIR}/DOWNLOADS/coeus-xml-${KC_PROJECT_VERSION}.zip org/kuali/coeus/coeus-xml/
	rm -fr META-INF org
}

function install_build_packages {
	# Debian/Ubuntu Packages
	if [ -f /etc/debian_version ]; then
			# Install Java and Maven on a Debian System
			if [ "$(lsb_release -r | awk '{print $2}')" == "14.04" ]; then
				if [ ! -f /etc/apt/trusted.gpg.d/openjdk-r-ppa.gpg ]; then
					apt-get update
					apt-get install -y software-properties-common
					add-apt-repository -y ppa:openjdk-r/ppa
				fi
			fi
			apt-get update
			apt-get install -y openjdk-8-jdk maven git zip
			# To ensure to use java version 8
			apt-get remove -y openjdk-7-jre-headless
	fi

	# RedHat/Centos Packages
	if [ -f "/etc/redhat-release" ]; then
			if [ ! -f /etc/yum.repos.d/epel-apache-maven.repo ]; then
				yum install -y wget
				wget http://repos.fedorapeople.org/repos/dchen/apache-maven/epel-apache-maven.repo -O /etc/yum.repos.d/epel-apache-maven.repo
			fi
				yum install -y java-1.8.0-openjdk-devel.x86_64 apache-maven git zip
				# Set the correct java version, version 8
				update-alternatives --set java /usr/lib/jvm/java-1.8.*-openjdk-1.8.*.x86_64/jre/bin/java
				update-alternatives --set javac /usr/lib/jvm/java-1.8.*-openjdk-1.8.*.x86_64/bin/javac
	fi
}

function install_packages {
	if [ -f /etc/debian_version ]; then
		if [ "$(lsb_release -r | awk '{print $2}')" == "14.04" ]; then
			apt-get install -y software-properties-common
			add-apt-repository -y ppa:openjdk-r/ppa
		fi
		apt-get update
		apt-get install -y wget zip unzip openjdk-8-jdk git tar graphviz
		# To ensure to use java version 8
		apt-get remove -y openjdk-7-jre-headless
	elif [ -f /etc/redhat-release ]; then
		yum install -y wget zip unzip java-1.8.0-openjdk git tar graphviz
	fi
}

function clean_up_system {
	### DOING SOME CLEAN-UP
	rm -fr ${CLEANUP_LOCATIONS}

	# Reset Database Related Files
	CLEANUP_DB="${CURRENT_WORKING_DIR}/SQL_LOGS/ ${CURRENT_WORKING_DIR}/setup_files/configure_mysql.sql ${CURRENT_WORKING_DIR}/setup_files/kc-config.xml"
	rm -fr ${CLEANUP_DB}
	cp -fr ${CURRENT_WORKING_DIR}/config_files/* ${CURRENT_WORKING_DIR}/setup_files/
}





function setup_tomcat {
	### SETTING UP TOMCAT
	mkdir -p ${CURRENT_WORKING_DIR}/DOWNLOADS
	cd ${CURRENT_WORKING_DIR}/DOWNLOADS
	if [ -f ${TOMCAT_FILE} ]; then
		echo "Found ${TOMCAT_FILE}"
	else
		wget ${TOMCAT_LINK}
	fi

	mkdir -p ${CATALINA_HOME}
	tar --strip-components=1 -zxvf ${TOMCAT_FILE} -C ${CATALINA_HOME}

	

	cp ${CURRENT_WORKING_DIR}/setup_files/setenv.sh ${CATALINA_HOME}/bin
	cd ${CATALINA_HOME}/lib
	if [ -f ${SPRING_INSTRUMENTATION_TOMCAT_NAME} ]; then
		echo "Found ${SPRING_INSTRUMENTATION_TOMCAT_NAME}"
	else
		wget ${SPRING_INSTRUMENTATION_TOMCAT_LINK}
	fi
	sed -i 's/<Context>/<Context>\n    <!-- END - For Kuali Coeus - Jeffery B. -->/' ${CATALINA_HOME}/conf/context.xml
	sed -i 's/<Context>/<Context>\n    <Loader loaderClass="org.springframework.instrument.classloading.tomcat.TomcatInstrumentableClassLoader"\/>/' ${CATALINA_HOME}/conf/context.xml
	sed -i 's/<Context>/<Context>\n\n    <!-- BEGIN - For Kuali Coeus -->/' ${CATALINA_HOME}/conf/context.xml
	cd ${CATALINA_HOME}/bin
	chmod +x *.sh
	export $CATALINA_HOME/bin:$PATH
}

function setup_kc_application {
	### Kill any current running tomcat before starting a new one...
	for i in $( ps -ef | grep -v "grep" | grep "tomcat" | awk '{print $2}' ); do
		kill -9 $i
	done

	### SETTING UP THE KC APPLICATION
	mkdir -p ${KC_CONFIG_XML_LOC}
	cp ${CURRENT_WORKING_DIR}/setup_files/kc-config.xml ${KC_CONFIG_XML_LOC}/kc-config.xml
	sed -i "s/127.0.0.1/${SYSTEM_HOSTNAME}/" ${KC_CONFIG_XML_LOC}/kc-config.xml

	### Get the current war file
	mkdir -p ${CURRENT_WORKING_DIR}/DOWNLOADS
	cd ${CURRENT_WORKING_DIR}/DOWNLOADS
	if [ -f ${KC_PROJECT_WAR_NAME} ]; then
		echo "Found ${KC_PROJECT_WAR_NAME}"
	else
		wget ${KC_PROJECT_WAR_LINK} -O ${KC_PROJECT_WAR_NAME}
	fi

	### Get the current rice and coeus xml file
	cd ${CURRENT_WORKING_DIR}/DOWNLOADS
	if [ -f rice-xml-${KC_PROJECT_VERSION}.zip ]; then
		echo "Found rice-xml-${KC_PROJECT_VERSION}.zip"
	else
		wget ${KC_PROJECT_RICE_XML} -O rice-xml-${KC_PROJECT_VERSION}.zip
	fi
	if [ -f coeus-xml-${KC_PROJECT_VERSION}.zip ]; then
		echo "Found coeus-xml-${KC_PROJECT_VERSION}.zip"
	else
		wget ${KC_PROJECT_COEUS_XML} -O coeus-xml-${KC_PROJECT_VERSION}.zip
	fi

	rm -fr ${CATALINA_HOME}/webapps/kc-*
	cp -f ${CURRENT_WORKING_DIR}/DOWNLOADS/${KC_PROJECT_WAR_NAME} ${CATALINA_HOME}/webapps/${KC_PROJECT_WAR_NAME}
	cd ${CATALINA_HOME}/bin
	./startup.sh

	tailf ${CATALINA_HOME}/logs/catalina.out &
	regex="initialization completed in"
	tailf ${CATALINA_HOME}/logs/catalina.out | while read line; do
		if [[ $line =~ $regex ]]; then
			pkill -9 -P $$ tailf
		fi
	done

	echo
	echo
	echo
	echo
	echo
	echo
	echo
	echo "If there were no errors, you should be able to access Kuali Coeus at: "
	echo "**********************************************************************"
	echo "*"
	echo "*	http://"${SYSTEM_HOSTNAME}":8080/kc-dev       | Login as 'admin' "
	echo "*"
	echo "**********************************************************************" 
	echo "PS: remember to turn off or configure your firewall on the server... ( Your firewall should be off, but make sure )"
	echo
	echo "And you should ingest rice-xml-${KC_PROJECT_VERSION}.zip and then coeus-xml-${KC_PROJECT_VERSION}.zip ( the XML files ) that you can find in the ${CURRENT_WORKING_DIR}/DOWNLOADS folder "
	echo
	echo
	echo
	echo
}












function main_menu {
	clear
	echo
	echo
	echo "======= Main Menu ======="
	echo "========================="
	echo
	echo "What would you like to do?"
	echo "  1) Compile and Install Kuali Coeus ${KC_PROJECT_VERSION}"
	echo "  7) Exit"
	echo
	echo -n "===> "
	read kuali_option
	case $kuali_option in
		[1] )
			echo
			clean_up_system
			

			echo "Compiling and Installing Kuali Coeus for you"
			echo "============================================"
			echo "Installing Packages"
			sleep 1
			install_build_packages
			install_packages
			# Just to make sure that Java version 8 is the default
			# if [ -f /etc/debian_version ]; then
			# 		update-alternatives --set java /usr/lib/jvm/java-8*openjdk*64/jre/bin/java
			# fi
			echo "Compiling Kuali Coeus"
			sleep 1
			compile_kuali
			
			
			sleep 1
			clone_kuali_coeus
			sleep 1
			
			echo "Setting up tomcat"
			sleep 1
			setup_tomcat
			echo "Setting and starting the KC application"
			sleep 1
			setup_kc_application
			;;

		
		[7] | [qQ] | [eE] )
			exit
			;;

		*) 
			echo
			echo "Invalid input"
			echo
			sleep 2
			main_menu
			;;
	esac
}

main_menu
